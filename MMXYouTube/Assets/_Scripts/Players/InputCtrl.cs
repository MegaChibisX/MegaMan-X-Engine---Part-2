using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class InputCtrl
{

    // The input generated by the library.
    public PlayerInput inputCtrl;

    // Key States
    public enum KeyState { None, Press, Hold, Release }

    // The left/right and up/down input vector.
    public Vector2 input;

    // The buttons. Bools check for pressed or not, keys have all states.
    public KeyState keyJump;
    private bool pressedJump = false;
    public KeyState keyDash;
    private bool pressedDash = false;

    // When the class starts
    public virtual void OnEnable()
    {
        // Sets up a new inputCtrl.
        inputCtrl = new PlayerInput();
        inputCtrl.Player.Enable();

        // The expressions below are called Lambda Expressions.
        // It's not important to know how they work, just keep in mind
        // that they perform actions at specific triggers.

        // When an input button gets pressed
        inputCtrl.Player.Movement.performed += ctx =>
        {
            input = ctx.ReadValue<Vector2>();
        };
        // When the input buttons get released
        inputCtrl.Player.Movement.canceled += ctx =>
        {
            input = Vector2.zero;
        };

        // This sets up all the pressed states of the buttons.
        inputCtrl.Player.Jump.performed += ctx => { pressedJump = true; };
        inputCtrl.Player.Jump.canceled += ctx => { pressedJump = false; };

        inputCtrl.Player.Dash.performed += ctx => { pressedDash = true; };
        inputCtrl.Player.Dash.canceled += ctx => { pressedDash = false; };
    }
    // When the class ends, this gets called
    public virtual void OnDisable() { }

    // Updates the KeyStates based on the raw input data.
    public void UpdateInputStates()
    {
        keyJump = UpdateKeyState(keyJump, pressedJump);
        keyDash = UpdateKeyState(keyDash, pressedDash);
    }
    // Checks if button is held or not.
    public bool IsHeld(KeyState state)
    {
        return state == KeyState.Press || state == KeyState.Hold;
    }

    // Updates the given KeyState based on the raw key data.
    private KeyState UpdateKeyState(KeyState curState, bool pressed)
    {
        if (pressed)
        {
            if (curState == KeyState.None)
                curState = KeyState.Press;
            else if (curState == KeyState.Press)
                curState = KeyState.Hold;
            else if (curState == KeyState.Release)
                curState = KeyState.Press;
            else if (curState == KeyState.Hold)
                curState = KeyState.Hold;
        }
        else
        {
            if (curState == KeyState.Hold)
                curState = KeyState.Release;
            else if (curState == KeyState.Release)
                curState = KeyState.None;
            else if (curState == KeyState.Press)
                curState = KeyState.Release;
            else if (curState == KeyState.None)
                curState = KeyState.None;
        }

        return curState;
    }

}
